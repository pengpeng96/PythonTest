'''
                                                          变量和数据类型---知识点总结

1、变量和类型
    变量的命名
    变量的使用
    input函数
    检查变量类型
    类型转换
    
变量
    变量名只能包含字幕、数字和下划线，且只能以字母和下划线打头。
    变量名不能有空格
    变量名不能与关键字和函数名重合
    变量名应该简短又具有描述性，比如： student_name比s_n好
    大写字母不会错，但是建议尽量用小写字母。
    
    避免命名错误。
    解释器会检查程序里面的错误，并且指出具体是哪一行代码错误了，例如。
    错误提示如下：
    告诉你第八行mesage变量名不符。
    
    
    
    在使用input()内置函数输入数字时，要注意一点：

    input()的返回值始终是字符串，所以type(number)永远是<class 'str'>！

    如：
    >>> temp = input("请输入一个数字：")
    请输入一个数字：3
    >>> type(temp)
    <class 'str'>

    这一点一定要注意！！！如果接下来要使用数字时，要回用到强制类型转化！

    如下例子：

    >>> temp = input("请输入一个数字：")
    请输入一个数字：3
    >>> type(temp)
    <class 'str'>
    >>> temp = int(temp)        
    >>> type(temp)
    <class 'int'>
    >>> temp+2
    5
    
    
    
类型转换

        主要针对几种存储工具：list、tuple、dict、set

        特殊之处：dict是用来存储键值对的。

    1、list 转换为set

        l1 = [1, 2, 4, 5]
        s1 = set(l1)
        print(type(s1))
        print(s1)
        输出：

        <class 'set'>
        {1, 2, 4, 5}

    2、set转换为list

        s1 = set([1, 2, 3, 4])
        l1 = list(s1)
        print(type(l1))
        print(l1)
        输出：

        <class 'list'>
        [1, 2, 3, 4]

    3、tuple 转换为set

        t1 = (1, 2, 3, 4)
        s1 = set(t1)
        print(type(s1))
        print(s1)
        输出：

        <class 'set'>
        {1, 2, 3, 4}

    4、set转换为tuple

        s1 = set([1, 2, 3, 4])
        t1 = tuple(s1)
        print(type(t1))
        print(t1)
        输出：

        <class 'tuple'>
        (1, 2, 3, 4)

    5、list转tuple

        l1 = [1, 2, 4, 5]
        t1 = tuple(l1)
        print(type(t1))
        print(t1)
        输出：

        <class 'tuple'>
        (1, 2, 4, 5)

    6、tuple转list

        t1 = (1, 2, 3, 4)
        l1 = list(t1)
        print(type(l1))
        print(l1)
        输出：

        <class 'list'>
        [1, 2, 3, 4]

    7、list转dict

        list1=[('a',1),('b',2),('c',3)]
        dict1={k:v for k,v in list1}
        dict2={v:k for k,v in list1}
        print(dict1)
        print(dict2)
        输出：

        {'a': 1, 'b': 2, 'c': 3}
        {1: 'a', 2: 'b', 3: 'c'}




 字符串
 
    字符串用单引号或者双引号括起来都可以。
    可以单引号里面嵌套双引号的内容，也可以双引号里面嵌套单引号的内容。
 方法

    .方法名() 表示方法， 举例3个方法。

    .title() 表示把字符串变量里面的首字母都变成大写。

    .upper() 表示把字符串里面的字母都变成大写。

    .lower() 表示把字符串里面的字幕都变成小写。

如下所示：

    一般情况下，不知道是否要以大写还是小写来存储的时候，可以先lower()一下，然后再根据情况选择是title()还是upper().

 字符串的拼接

    通过+来合并字符串，并且可以把字符串以方法和变量的形式整合，例如下所示：

添加空白

    \t 表示制表符；

    \n 表示换行符；

    Print(“if\nI\n\twant\n\tcheck\n\tthis”)

    输入结果就是

        If

        I

        Want

        Check

        This

删除空白

    利用.retrip()方法可以删除字符串末尾的空白；lstrip()删除开头的空白；strip()删除两头的空白。

字符串语法错误。

    单引号和撇号不能共用，因为程序会把撇号后面的部分当成python代码从而出错。


整数

    Python可以直接进行数字运算， + – * / **（乘方）

浮点数

    就是小数，这本书里面讲的很简单。

    使用str()避免类型错误。

    Str()函数的目的就是为了处理把不确定的字符或者数字解释为字符串。

    比如：age=23

    Message=”happy “+age+”rd birthday!”

    Python不知道age里面到底是数字还是字符还是字符串，就会出错，解决办法是把age给

    Str(age)一下。
    
数字和字符串


    （1）Python3默认字符编码是Unicode

    （2）utf-8是Unicode的扩展集，在Python3中，Unicode在utf-8之间可以直接打印；而Unicode与GBK之间需要转换。

    （3）所有不同字符集之间的转换，中间需通过Unicode。
    
    
复数的数学运算
    复数可以用使用函数 complex(real, imag) 或者是带有后缀j的浮点数来指定。比如：

        >>> a = complex(2, 4)
        >>> b = 3 - 5j
        >>> a
        (2+4j)
        >>> b
        (3-5j)
        >>>
    对应的实部、虚部和共轭复数可以很容易的获取。就像下面这样：

        >>> a.real
        2.0
        >>> a.imag
        4.0
        >>> a.conjugate()
        (2-4j)
        >>>
    另外，所有常见的数学运算都可以工作：

        >>> a + b
        (5-1j)
        >>> a * b
        (26+2j)
        >>> a / b
        (-0.4117647058823529+0.6470588235294118j)
        >>> abs(a)
        4.47213595499958
        >>>
        如果要执行其他的复数函数比如正弦、余弦或平方根，使用 cmath 模块：

        >>> import cmath
        >>> cmath.sin(a)
        (24.83130584894638-11.356612711218174j)
        >>> cmath.cos(a)
        (-11.36423470640106-24.814651485634187j)
        >>> cmath.exp(a)
        (-4.829809383269385-5.5920560936409816j)
        >>>
        讨论
        Python中大部分与数学相关的模块都能处理复数。 比如如果你使用 numpy ，可以很容易的构造一个复数数组并在这个数组上执行各种操作：
    
        >>> import numpy as np
        >>> a = np.array([2+3j, 4+5j, 6-7j, 8+9j])
        >>> a
        array([ 2.+3.j, 4.+5.j, 6.-7.j, 8.+9.j])
        >>> a + 2
        array([ 4.+3.j, 6.+5.j, 8.-7.j, 10.+9.j])
        >>> np.sin(a)
        array([ 9.15449915 -4.16890696j, -56.16227422 -48.50245524j,
        -153.20827755-526.47684926j, 4008.42651446-589.49948373j])
        >>>
        Python的标准数学函数确实情况下并不能产生复数值，因此你的代码中不可能会出现复数返回值。比如：

        >>> import math
        >>> math.sqrt(-1)
        Traceback (most recent call last):
         File "<stdin>", line 1, in <module>
        ValueError: math domain error
        >>>
        如果你想生成一个复数返回结果，你必须显示的使用 cmath 模块，或者在某个支持复数的库中声明复数类型的使用。比如：

        >>> import cmath
        >>> cmath.sqrt(-1)
        1j
        >>>

    
    
    
     
    复数是由一个实数和一个虚数组合构成，表示为：x+yj
    一个负数时一对有序浮点数(x,y)，其中x是实数部分，y是虚数部分。
    Python语言中有关负数的概念：
        1、虚数不能单独存在，它们总是和一个值为0.0的实数部分一起构成一个复数
        2、复数由实数部分和虚数部分构成
        3、表示虚数的语法：real+imagej
        4、实数部分和虚数部分都是浮点数
        5、虚数部分必须有后缀j或J
    复数的内建属性：
    复数对象拥有数据属性，分别为该复数的实部和虚部。
    复数还拥有conjugate方法，调用它可以返回该复数的共轭复数对象。
    复数属性：real(复数的实部)、imag(复数的虚部)、conjugate()（返回复数的共轭复数）
    
    
    运算符
    运算符用于对值和变量执行操作。操作员可以操纵单个项目并返回结果。数据项称为操作数或参数。运算符由关键字或特殊字符表示。例如，对于身份运算符，我们使用关键字“is”和“is not”。

    在本文中，我们将学习各种操作符

        算术运算符

        比较运算符

        Python赋值运算符

        逻辑运算符或按位运算符

        会员运算符
    
        身份运算符

        运算符优先级


         
        算术运算符
            算术运算符执行各种算术计算，如加法，减法，乘法，除法，％模数，指数等。在Python中有各种算术计算方法，例如可以使用eval函数，声明变量和计算或调用函数。

            示例：对于算术运算符，我们将采用加法的简单示例，其中我们将添加两位数4 + 5 = 9

            x= 4	
            y= 5
            print(x + y)
            同样，您可以使用其他算术运算符，如乘法（*），除法（/），减法（ - ）等。

        比较运算符
            这些运算符比较操作数两侧的值并确定它们之间的关系。它也被称为关系运算符。各种比较运算符是（==，！=，<>，>，<=等）

            示例：对于比较运算符，我们将x的值与y的值进行比较，并将结果打印为true或false。在这个例子中，我们的x = 4的值小于y = 5，所以当我们将值打印为x> y时，它实际上将x的值与y进行比较，因为它不正确，所以它返回false。

            x = 4
            y = 5
            print(('x > y  is',x>y))
            同样，您可以尝试其他比较运算符（x <y，x == y，x！= y等）

        Python赋值运算符
            Python赋值运算符用于将右操作数的值赋给左操作数。Python中使用的各种赋值运算符是（+ =， - =，* =，/ =等）

            示例：例如，Python赋值运算符只是分配值


                num1 = 4
                num2 = 5
                print(("Line 1 - Value of num1 : ", num1))
                print(("Line 2 - Value of num2 : ", num2))
        复合赋值运算符的示例

             我们还可以使用复合赋值运算符，您可以在其中添加，减去，将右操作数乘以左，并为左操作数分配加法（或任何其他算术函数）。

             第1步：为num1和num2分配值
             第2步：添加num1和num2的值（4 + 5 = 9）
             第3步：为此结果将num1添加到步骤2（9 + 4）的输出
             第4步：它将最终结果打印为13
            num1 = 4
            num2 = 5
            res = num1 + num2
            res += num1
            print(("Line 1 - Result of + is ", res))
        逻辑运算符
            Python中的逻辑运算符用于条件语句是true还是false。Python中的逻辑运算符是AND，OR和NOT。对于应用了以下条件的逻辑运算符。

             于AND运算符 - 如果两个操作数（右侧和左侧）都为真，则返回TRUE
             对于OR运算符 - 如果操作数（右侧或左侧）中的任何一个为真，则返回TRUE
            对于NOT运算符 - 如果操作数为假，则返回TRUE
            示例：在示例中，我们根据a和b的值得到true或false

                a = True
                b = False
                print(('a and b is',a and b))
                print(('a or b is',a or b))
                print(('not a is',not a))
            这些运算符测试序列中的成员资格，例如列表，字符串或元组。Python中使用了两个成员运算符。（in，not in）。它根据指定序列或字符串中存在的变量给出结果

            示例：例如，我们通过使用in和not运算符来检查x = 4的值和y = 8的值是否在列表中可用。

                x = 4
                y = 8
                list = [1, 2, 3, 4, 5 ];
                if ( x in list ):
                     print("第一行- x在给定列表中可用")
                else:
                     print("第一行- x在给定列表中不可用")
                if ( y not in list ):
                    print("第二行- y在给定列表中不可用")
                else:
                     print("第二行 - y在给定列表中可用")
                     
                声明x和y的值
                声明list的值
                使用if语句在代码中使用“in”运算符来检查列表中存在的x的值并相应地打印结果
                使用if语句在代码中使用“not in”运算符来检查列表中存在的y的值并相应地打印结果
                运行代码 - 代码运行时，它会提供所需的输出
                
                
        身份运算符
                要比较两个对象的内存位置，请使用Identity Operators。Python中使用的两个标识运算符是（是，不是）。

                运算符是：如果两个变量指向同一个对象，则返回true，否则返回false
                运算符不是：如果两个变量指向同一个对象，则返回false，否则返回true
                
                
             以下操作数按优先级递减顺序排列：

                同一个框中的操作员从左到右进行评估
                    运算符（降低优先顺序）	                                       含义
                                **                                             指数
                          *，/，//，％	                                 乘法，除法，分区，模数
                               +， -	                                        加法，减法
                            <= <>> =	                                     比较运算符
                        =％= / = // = - = + = * = ** =	                    分配运算符
                               是不是	                                        身份运算符
                              在不在	                                       会员运算符
                               不是和	                                       逻辑运算符

            示例：

                x = 20
                y = 20
                if ( x is y ): 
	                    print("x & y  相同身份")
                y=30
                if ( x is not y ):
	                    print("x & y 不同身份") 
                        
                声明变量x和y的值
                在代码中使用运算符“is”来检查x的值是否与y相同
                接下来，如果x的值与y不同，我们在代码中使用运算符“is not”
                运行代码 - 结果的输出符合预期
                
                
        运算符优先级
            运算符优先级确定首先需要评估哪些运算符。为避免值的歧义，必须使用优先级运算符。就像在普通乘法方法中一样，乘法具有比加法更高的优先级。例如在3 + 4 * 5中，答案是23，为了改变优先顺序我们使用括号（3 + 4）* 5，现在答案是35.在Python中使用的优先运算符是（一元+ - 〜， **，* /％，+ - ，＆）等

                v = 4
                w = 5
                x = 8
                y = 2
                z = 0
                z = (v+w) * x / y;   
                print(" (v+w) * x/ y 的值是 ",  z)
                声明变量v，w ... z的值
                现在应用公式并运行代码
                代码将执行并计算具有更高优先级的变量，并将给出输出
 


                Python中有各种算术计算方法，因为您可以使用eval函数，声明变量和计算或调用函数
                通常称为关系运算符的比较运算符用于比较它们两侧的值并确定它们之间的关系
                Python赋值运算符只是将值赋给变量
                Python还允许您在复杂的算术计算中使用复合赋值运算符，您可以在其中将一个操作数的结果分配给另一个
                对于AND运算符 - 如果两个操作数（右侧和左侧）都为真，则返回TRUE
                对于OR运算符 - 如果操作数（右侧或左侧）中的任何一个为真，则返回TRUE
                对于NOT运算符 - 如果操作数为假，则返回TRUE
                Python中使用了两个成员运算符。（in，not in）。
                它根据指定序列或字符串中存在的变量给出结果
                Python中使用的两个标识运算符是（是，不是）
                如果两个变量指向同一个对象，则返回true，否则返回false
                当您必须为复杂计算中首先需要进行的计算设置优先级时，优先级运算符非常有用。

   

'''
